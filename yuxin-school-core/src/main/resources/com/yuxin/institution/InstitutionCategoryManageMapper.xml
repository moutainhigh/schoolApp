<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuxin.wx.institution.mapper.InstitutionCategoryManageMapper">

    <resultMap id="queryCateData" type="com.yuxin.wx.model.institution.InstitutionCategoryVo">
        <result property="id" column="id" />
        <result property="codeName" column="code_name" />
        <result property="isEnable" column="is_enable" />
        <result property="secondCate" column="secondCate" />
        <result property="imgUrl" column="img_url" />
        <result property="codeLevel" column="code_level" />
        <result property="sort" column="sort" />
        <result property="parentId" column="parent_id" />
    </resultMap>

    <!-- 推荐机构管理-首页分类推荐列表 by Liutr -->
    <resultMap id="queryCateSimple" type="com.yuxin.wx.model.institution.InstitutionCategoryVo">
        <result property="id" column="id" />
        <result property="codeName" column="code_name" />
        <result property="isEnable" column="is_enable" />
        <result property="thirdRecommend" column="third_recommend" />
        <result property="codeLevel" column="code_level" />
        <result property="sort" column="sort" />
        <result property="parentId" column="parent_id" />
        <result property="firstRecommend" column="first_recommend" />
        <result property="sort3" column="sort3" />

    </resultMap>


    <resultMap id="queryInsCategory" type="com.yuxin.wx.model.institution.InstitutionCategoryVo">
        <result property="insId" column="insId" />
        <result property="firstcodeName" column="firstcodeName" />
        <result property="secondcodeName" column="secondcodeName" />
        <result property="oneLevelId" column="oneLevelId" />
        <result property="twoLevelId" column="twoLevelId" />
    </resultMap>

    <!--查询所有1.2级分类-->
    <select id="queryInstitutionCategorys" resultMap="queryCateData" parameterType="map">
        select
          ic1.id,
          ic1.code_name ,
          ic1.is_enable ,
          GROUP_CONCAT(CONCAT(ic2.id,'@',ic2.code_name) order by ic2.id) as secondCate
        from institution_category ic1
        left join institution_category ic2 on ic1.id=ic2.parent_id
        where ic1.code_level=1
        GROUP BY ic1.id
        ORDER BY ic1.is_enable desc,ic1.create_time desc
        limit #{search.firstIndex},#{search.pageSize}
    </select>

    <!--查询所有1.2级分类 总记录-->
    <select id="queryInstitutionCategorysCount" resultType="Integer" parameterType="map">
    select count(1) from (
     select
           ic1.id,
          ic1.code_name ,
          ic1.is_enable ,
          GROUP_CONCAT(CONCAT(ic2.id,'@',ic2.code_name)) as secondCate
        from institution_category ic1
        left join institution_category ic2 on ic1.id=ic2.parent_id
        where ic1.code_level=1
        GROUP BY ic1.id
    )t

    </select>

    <!--获取指定ids最小排序-->
    <select id="queryMinSortByIds" resultType="Integer" parameterType="com.yuxin.wx.model.institution.InstitutionCategoryVo">
       select min(sort) from institution_category where id in(${ids})
    </select>

    <!--根据条件查询分类-->
    <select id="queryInstitutionCategoryByCondition" resultMap="queryCateData" parameterType="map">
       select
        id,
        code_name,
        is_enable,
        img_url,
        code_level
       from institution_category where 1=1
       <if test="id!=null and id!=''">
           and id=#{id}
       </if>
        <if test="codeName!=null and codeName!=''">
            and code_name=#{codeName}
        </if>
        limit 1
    </select>
    <!--修改分类信息-->
    <update id="update" parameterType="com.yuxin.wx.model.institution.InstitutionCategoryVo">
        update institution_category
        <trim prefix="set" suffixOverrides=",">
            <if test="codeName != null and codeName != ''">code_name = #{codeName},</if>
            <if test="isEnable != null">is_enable = #{isEnable},</if>
            <if test="imgUrl != null and imgUrl != ''">img_url = #{imgUrl},</if>
            <if test="firstRecommend != null">first_recommend = #{firstRecommend},</if>
            <if test="secondRecommend != null">second_recommend = #{secondRecommend},</if>
            <if test="thirdRecommend != null">third_recommend = #{thirdRecommend},</if>
            update_time=now(),
        </trim>
        <where>id in (${ids})</where>
    </update>
    <!--保存分类信息-->
    <insert id="insert" parameterType="com.yuxin.wx.model.institution.InstitutionCategoryVo">
        INSERT INTO institution_category
        (code_name,code_level,code_type,img_url,is_enable, parent_id,create_time, update_time,sort)
        VALUES (#{codeName},#{codeLevel},#{codeType}, #{imgUrl}, #{isEnable}, #{parentId}, now(),now(),#{sort})
    </insert>

    <select id="findFistCategorys" resultMap="queryCateData"  parameterType="map">
        select id, code_name ,code_level from institution_category where id in (select parent_id from institution_category where code_level = 2 )
    </select>

    <select id="findSecondCategorys" resultMap="queryCateData"  parameterType="map">
        select id, code_name,parent_id from institution_category where code_level = 2 and code_type = 0
    </select>

    <select id="findCecondCategorys" resultMap="queryCateData"  parameterType="Integer">
        select id, code_name from institution_category where code_level = 2 and code_type = 0  and parent_id = #{id}
    </select>

    <select id="queryInstitutionCategorysByInsId" parameterType="Integer" resultMap="queryInsCategory">
        select ii.id insId,ic.id oneLevelId,ic1.id twoLevelId ,ic.code_name firstcodeName,ic1.code_name secondcodeName from institution_info ii
        join institution_relation ir on ii.id=ir.ins_id
        left join institution_category ic on ic.id = ir.one_level_id
        left JOIN institution_category ic1 on ic1.id = ir.two_level_id
        where ii.id=#{id}
    </select>

    <!-- 推荐机构管理-首页分类推荐 - 列表  -->
    <select id="queryCateList" parameterType="map" resultMap="queryCateSimple" >
      SELECT
          `id`,
          `code_name`,
          `code_level`,
          `is_enable`,
          `parent_id`,
          `first_recommend`,
          `sort`,
          `sort3`
        FROM
          `institution_category`
        WHERE `code_type` = 0  and is_enable = 1 and `first_recommend` = 1
        ORDER BY `sort` ASC  LIMIT #{firstIndex} , #{pageSize}
    </select>

    <select id="queryCateListCount"  resultType="int" >
        SELECT
          COUNT(id)
        FROM
        `institution_category`
        WHERE `code_type` = 0 and is_enable = 1 and `first_recommend` = 1

    </select>


    <select id="getCateById" parameterType="Integer" resultMap="queryCateSimple" >
        SELECT
        `id`,
        `code_name`,
        `code_level`,
        `is_enable`,
        `parent_id`,
        `first_recommend`,
        `sort`,
        `sort3`
        FROM
        `institution_category`
        WHERE `code_type` = 0
        and id = #{id}
    </select>

    <update id="updateRecommendStatusById" parameterType="map" >
      UPDATE
          `institution_category`
        SET
          `first_recommend` = #{isRecommend}
        WHERE `id` = #{id}
    </update>

    <update id="updateRecommendStatusById1" parameterType="map" >
        UPDATE
        `institution_category`
        SET
        `third_recommend` = #{isRecommend}
        WHERE `id` = #{id}
    </update>

    <!-- 提升指定某个排名的分类的排名 -->
    <update id="increaseSort" parameterType="Integer" >
       UPDATE `institution_category` SET `sort` = `sort` - 1 WHERE  is_enable = 1 and `sort` = #{sort}
    </update>

    <!-- 提升指定某个排名的分类的排名 sort3 -->
    <update id="increaseSort3" parameterType="Integer" >
        UPDATE `institution_category` SET `sort3` = `sort3` - 1 WHERE  is_enable = 1 and `sort3` = #{sort}
    </update>

    <!-- 提升指定排名后的所有分类的排名 , 用在删除某个分类的时候使用 SET is_enable = 0 -->
    <update id="increaseSortAfter" parameterType="Integer" >
        UPDATE `institution_category` SET `sort` = `sort` - 1 WHERE  is_enable = 1 and first_recommend = 1 and `sort` &gt; #{oldSort}
    </update>

    <!--提升指定排名后的所有分类的排名 sort3-->
    <update id="increaseSortAfter3" parameterType="Integer" >
        UPDATE `institution_category` SET `sort3` = `sort3` - 1 WHERE  is_enable = 1 and third_recommend = 1 and `sort3` &gt; #{oldSort}
    </update>

    <!-- 降低某个排名的分类的排名 -->
    <update id="reduceSort" parameterType="Integer" >
        UPDATE `institution_category` SET `sort` = `sort` + 1 WHERE is_enable = 1 and first_recommend = 1 and   `sort` = #{oldSort}
    </update>

    <!-- 降低某个排名的分类的排名 sort3-->
    <update id="reduceSort3" parameterType="Integer" >
        UPDATE `institution_category` SET `sort3` = `sort3` + 1 WHERE is_enable = 1 and third_recommend = 1  and   `sort3` = #{oldSort}
    </update>

    <update id="updateSort" parameterType="map" >
      UPDATE
          `institution_category`
        SET
          `sort` = #{sort}
        WHERE `id` = #{id}
    </update>

    <update id="updateSort3" parameterType="map" >
        UPDATE
        `institution_category`
        SET
        `sort3` = #{sort}
        WHERE `id` = #{id}
    </update>

    <select id="queryRecommendCount"  resultType="int" >
        SELECT
        COUNT(id)
        FROM
        `institution_category`
        WHERE `code_type` = 0 AND `is_enable` = 1 and first_recommend = 1

    </select>

    <select id="queryRecommendCount3"  resultType="int" >
        SELECT
        COUNT(id)
        FROM
        `institution_category`
        WHERE `code_type` = 0 AND `is_enable` = 1 and third_recommend = 1

    </select>



    <!--  获取所有的is_enable = 1 的分类数据，并且返回是否为推荐分类 -->
    <select id="queryInstitutionCategorysEnabled"  resultMap="queryCateSimple" >
      SELECT
          `id`,
          `code_name`,
          `code_level`,
          `code_type`,
          `parent_id`,
          `first_recommend`,
          `third_recommend`,
          `sort`,
          `sort3`
        FROM
          `institution_category`
        WHERE  `is_enable` = 1 order by code_level ASC
    </select>


    <select id="queryInstitutionCategorysEnabled1"  resultMap="queryCateSimple" >
        SELECT
        `id`,
        `code_name`,
        `code_level`,
        `code_type`,
        `parent_id`,
        `third_recommend`,
        `sort3` sort
        FROM
        `institution_category`
        WHERE  `is_enable` = 1  AND third_recommend = 1  ORDER BY sort3  ASC
    </select>

    <!-- 获取指定排名后的所有is_enabled = 1的分类  AND `sort` &lt; #{sort} -->
    <select id="queryInstitutionCategorysAfterSort" parameterType="Integer"  resultMap="queryCateSimple" >
        SELECT
        `id`,
        `code_name`,
        `code_level`,
        `code_type`,
        `parent_id`,
        `first_recommend`,
        `sort`,
        `sort3`
        FROM
        `institution_category`
        WHERE  `is_enable` = 1  AND first_recommend = 1  order by sort ASC

    </select>


    <!-- 首页列表推荐 - 获取列表 -->
    <select id="getIndexRecommendList" parameterType="map" resultType="map">
        SELECT
          info.id,
          info.`name`,
          ir.id rid,
          ir.`is_recommend`,
          ir.`sort`,
          ir.`cate_id` as one_level_id,
          ic1.`code_name` name1,
          ic1.`first_recommend` icRecommend1
        FROM
          `institution_info` info
          INNER JOIN `ins_recommend` ir
            ON info.`id` = ir.`ins_id`
          LEFT JOIN `institution_category` ic1
            ON ir.`cate_id` = ic1.`id`
        WHERE ir.`cate_id` = #{typeId}
          and info.is_shelves = 1
          <if test="name != null and name != ''"> and info.name LIKE '%${typeName}%' </if>
        <choose>
            <when test="status == 1">and  ir.is_recommend=1</when>
            <when test="status == 2">and  ir.is_recommend=0</when>
        </choose>
          GROUP BY info.id
          ORDER BY ir.`is_recommend` DESC,
                   ir.`sort` ASC
          LIMIT #{pageStart} , #{pageSize}
    </select>

    <select id="getIndexRecommendListCount" parameterType="Map" resultType="int">
       <!-- select count(1) from
        (SELECT
        info.id
        FROM
        `institution_info` info
        INNER JOIN `institution_relation` ir
        ON info.`id` = ir.`ins_id`
        LEFT JOIN `institution_category` ic1
        ON ir.`one_level_id` = ic1.`id`
        LEFT JOIN `institution_category` ic2
        ON ir.`two_level_id` = ic2.`id`
        WHERE ( ir.`one_level_id` = #{typeId}
        OR ir.`two_level_id` = #{typeId})
        and info.is_shelves = 1
        <if test="status != null and status == 2 and status != '' "> and  ir.`is_recommend` != #{level} and ir.`is_recommend` != 3</if>
        <if test="status != null and status == 1 and status != '' "> and  (ir.`is_recommend` = #{level} or ir.`is_recommend` = 3) </if>
        <if test="typeName != null "> and info.name LIKE  CONCAT('%','${typeName}','%' )  </if>
        GROUP BY info.id
        ) as c-->
        select count(1) from
        (
            select ii.id from institution_info ii
            join ins_recommend ir on ii.id=ir.ins_id
            where ii.is_shelves=1 and ir.cate_id=#{typeId}
            <choose>
                <when test="status == 1">and  ir.is_recommend=1</when>
                <when test="status == 2">and  ir.is_recommend=0</when>
            </choose>
            <if test="typeName != null "> and ii.name LIKE  CONCAT('%','${typeName}','%' )  </if>
            GROUP BY ii.id
        ) as c
    </select>

    <!-- 更新首页列表推荐的某个机构的推荐状态 -->
    <update id="alterIndexRecommendStatusNo" parameterType="map"  >
        UPDATE `institution_relation` SET `is_recommend` = ${isRecommend} WHERE one_level_id = #{oneId} and two_level_id = #{twoId} and ins_id = #{insId}
    </update>

    <update id="alterIndexRecommendStatusYes" parameterType="map"  >
        UPDATE `institution_relation` SET
        `is_recommend` = #{isRecommend}
        <if test="isROld == 0 "> , `sort` = #{sort} </if>
         WHERE one_level_id = #{oneId} and two_level_id = #{twoId} and ins_id = #{insId}
    </update>

    <!-- 更新指定list中的所有排序信息 -->
    <update id="increaseIndexRecommendAfterAll" parameterType="java.util.List"  >
        UPDATE `institution_relation` SET `sort` = CASE `id`

        <foreach collection="list" index="index" item="item"  separator=" " >
            WHEN ${item.id} THEN ${item.sort}
        </foreach>

        ELSE sort

        END
    </update>

    <!---->
    <select id="getRelationAfterSortAll" parameterType="Integer" resultType="map">
        SELECT `id` FROM `institution_relation` WHERE `is_recommend` != 0 AND `sort` &gt; #{sort}
    </select>

    <!-- 获取指定排序指定更新方法周围的关联信息，适用于首页列表推荐箭头调整排序业务 -->
    <select id="getAroundRelation" resultType="map" parameterType="map">
        SELECT
          *
        FROM
        `ins_recommend`
        WHERE `is_recommend` =1
      and cate_id = #{typeId}
        <if test="flag == 1 ">  AND `sort` &lt; #{sort}  </if>
        <if test="flag == 0 ">  AND `sort` &gt; #{sort}  </if>
        <if test="flag == 1 ">  ORDER BY `sort` DESC   </if>
        <if test="flag == 0 ">  ORDER BY `sort` ASC   </if>
        LIMIT 1
    </select>

    <!-- 获取首页列表推荐的某个机构的推荐状态  -->
   <select id="getIndexRecommendInfo" parameterType="map" resultType="map" >
       SELECT * FROM `ins_recommend` WHERE `id` = #{rid}
       <if test="insId != null and insId != '' "> AND `ins_id` = #{insId} </if>
   </select>

    <select id="getIndexRecommendInfoList" parameterType="map" resultType="map" >
        SELECT * FROM `institution_relation` WHERE 1=1
        <if test="insId != null and insId != '' "> AND `ins_id` = #{insId} </if>
    </select>

    <!-- 获取所有中间表的排序信息-->
    <select id="getIndexRecommendYesCountAll"  resultType="int" parameterType="map">
        SELECT COUNT(id) FROM `ins_recommend` WHERE `cate_id` = #{typeId}
    </select>


    <select id="getTypeEntityById" parameterType="Integer" resultType="map">
        SELECT * FROM  `institution_category` WHERE id = #{id} limit 1
    </select>
    <!-- 根据排名和类型id获取关联信息，适用于分类为一级分类 -->
    <select id="getRelationByTypeIdSort1" resultType="map" parameterType="map">
        SELECT * FROM `institution_relation` WHERE `sort` = #{sort} AND `one_level_id` = #{typeId} and is_recommend = 1 LIMIT 1
    </select>

    <!-- 根据排名和类型id获取关联信息，适用于分类为二级分类 -->
    <select id="getRelationByTypeIdSort2" resultType="map" parameterType="map">
        SELECT * FROM `institution_relation` WHERE `sort` = #{sort} AND `two_level_id` = #{typeId} and is_recommend = 1 LIMIT 1
    </select>

    <!-- 交换两个关联表的排序 -->
    <update id="exchangeSortByCaseWhen" parameterType="java.util.List" >
        UPDATE `ins_recommend` SET `sort` = CASE `id`

        <foreach collection="list" index="index" item="item"  separator=" " >
            WHEN ${item.id} THEN ${item.sort}
        </foreach>

        ELSE sort

         END
    </update>

    <!-- 批量更新首页分类推荐 -->
    <update id="exchangeSortIndexType" parameterType="java.util.List" >
        UPDATE `institution_category` SET `sort` = CASE `id`

        <foreach collection="list" index="index" item="item"  separator=" " >
            WHEN ${item.id} THEN ${item.sort}
        </foreach>

        ELSE sort

        END
    </update>

    <select id="getMaxSortByTypeId1" parameterType="Integer" resultType="Integer">
        SELECT IF(ISNULL(MAX(sort)),0,MAX(sort)) maxSort FROM `institution_relation` WHERE `is_recommend` = 1 AND `one_level_id` = #{typeId}
    </select>

    <select id="getMaxSortByTypeId2" parameterType="Integer" resultType="Integer">
       SELECT IF(ISNULL(MAX(sort)),0,MAX(sort)) maxSort FROM `institution_relation` WHERE `is_recommend` = 1 AND `two_level_id` =  #{typeId}
    </select>

    <select id="queryInsInfoByTypeId" parameterType="map" resultType="com.yuxin.wx.model.institution.IndexRecommendVo">
        select (@rowNo := @rowNo+1) as sort,t.* from (
            select DISTINCT ins_id as insId,case when one_level_id=#{id} then one_level_id else two_level_id end as tid,0 as status
            from institution_relation where one_level_id=#{id} or two_level_id=#{id}
        )t,(select  @rowNo :=0)tt
    </select>

    <insert id="batchInsertRecommendInfo" parameterType="java.util.List" useGeneratedKeys="true">
        INSERT INTO `ins_recommend` (`ins_id`, `cate_id`, `is_recommend`, `sort`)
        values
        <foreach item="item" collection="list" separator="," >
            (#{item.insId},#{item.tid},#{item.status},#{item.sort})
        </foreach>
    </insert>

    <delete id="deletRecommendInsInfo" parameterType="map">
        delete from ins_recommend where cate_id in (${id})
    </delete>


    <select id="queryInsRecommendMaxSort" parameterType="map" resultType="int">
        select case when max(sort) is null then 0 else max(sort) end  from ins_recommend where cate_id=#{cateId}
    </select>

    <update id="updateRecommendIns" parameterType="map">
        update ins_recommend set
        <choose>
            <when test="flag==1"> is_recommend=1,sort=#{sort}</when>
            <otherwise>is_recommend=0</otherwise>
        </choose>
        WHERE id =#{rid} and ins_id=${insId}
    </update>

    <select id="queryOldCateIdsByInsId" parameterType="map" resultType="String">
        select cate_id from ins_recommend where ins_id=#{insId}
    </select>
</mapper>