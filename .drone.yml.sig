eyJhbGciOiJIUzI1NiJ9.I2dsb2JhbCBkb2NrZXIgaW5mbw0KZG9ja2VycHViOiAmZG9ja2VyaW5mbw0KICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyDQogICB2b2x1bWVzOg0KICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrDQogICBmb3JjZV90YWc6IHRydWUNCiAgIG1pcnJvcjogImh0dHBzOi8vZG9ja2VyLm1pcnJvcnMudXN0Yy5lZHUuY24iDQogICByZWdpc3RyeTogJHtBTElfRE9DS0VSX1VSTH0NCiAgIHVzZXJuYW1lOiAke0FMSV9ET0NLRVJfVVNFUn0NCiAgIHBhc3N3b3JkOiAke0FMSV9ET0NLRVJfUEFTU30NCiAgIGVtYWlsOiAke0FMSV9ET0NLRVJfVVNFUn0NCmRvY2tlcjogJmRvY2tlcg0KICAgPDw6ICpkb2NrZXJpbmZvDQogICB0YWdzOg0KICAgICAtICR7RFJPTkVfVEFHPWxhdGVzdH0NCiAgICAgLSBsYXRlc3QNCiAgIHdoZW46DQogICAgIGV2ZW50OiBbcHVzaCx0YWddDQogICAgIGJyYW5jaDogW21hc3RlcixzdGFibGUscmVmcy90YWdzLypdDQpkb2NrZXJ0ZXN0OiAmZG9ja2VydGVzdA0KICAgPDw6ICpkb2NrZXJpbmZvDQogICB0YWdzOiAke0RST05FX0JSQU5DSH0NCiAgIHdoZW46DQogICAgIGV2ZW50OiBbcHVzaCx0YWddDQogICAgIGJyYW5jaDogW3Rlc3QsaG90Zml4KixyZWxlYXNlLypdDQoNCnBpcGVsaW5lOg0KICBjbG9uZToNCiAgICBpbWFnZTogcGx1Z2lucy9naXQNCiAgICByZWN1cnNpdmU6IHRydWUNCiAgICB0YWdzOiB0cnVlDQogIGJ1aWxkOg0KICAgIGltYWdlOiBtYXZlbjozLWpkay03LWFscGluZQ0KICAgIHZvbHVtZXM6DQogICAgICAtIC9kYXRhL21hdmVuOi9yb290Ly5tMg0KICAgIGNvbW1hbmRzOg0KICAgICAgLSBjcCAuc2V0dGluZ3MueG1sIC9yb290Ly5tMi9zZXR0aW5ncy54bWwNCiAgICAgIC0gbXZuIGNsZWFuIGluc3RhbGwgLURtYXZlbi50ZXN0LnNraXA9dHJ1ZQ0KICBwdXNodG9tYXZlbjoNCiAgICBpbWFnZTogbWF2ZW46My1qZGstNy1hbHBpbmUNCiAgICB2b2x1bWVzOiAvZGF0YS9tYXZlbjovcm9vdC8ubTINCiAgICBjb21tYW5kczoNCiAgICAgIC0gY2QgeXV4aW4tc2Nob29sLW1vZGVsICYmIG12biBkZXBsb3kNCiAgICB3aGVuOg0KICAgICAgYnJhbmNoOiBbbWFzdGVyLHN0YWJsZSxyZWZzL3RhZ3MvKl0NCiAgICAgIA0KICB3aW5zaGFyZS15dXhpbi1zY2hvb2w6DQogICAgPDw6ICpkb2NrZXINCiAgICByZXBvOiAiJHtBTElfRE9DS0VSX1VSTH0vd2luc2hhcmUvd2luc2hhcmUteXV4aW4tc2Nob29sIg0KICAgIGRvY2tlcmZpbGU6IERvY2tlcmZpbGUud2ViDQogIA0KICB3aW5zaGFyZS15dXhpbi1zY2hvb2wtdGVzdDoNCiAgICA8PDogKmRvY2tlcnRlc3QNCiAgICByZXBvOiAiJHtBTElfRE9DS0VSX1VSTH0vd2luc2hhcmUvd2luc2hhcmUteXV4aW4tc2Nob29sIg0KICAgIGRvY2tlcmZpbGU6IERvY2tlcmZpbGUud2ViDQo.kTIC7ouJjvy4FVf5313fd1ly2tEyrtYNCK91yTcduXE